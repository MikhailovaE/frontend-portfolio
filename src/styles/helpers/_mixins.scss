
//    Mixins

@mixin transition($args: all 0.3s ease 0s) {
    -webkit-transition: $args;
       -moz-transition: $args;
         -o-transition: $args;
            transition: $args;
  }
  
  @mixin transition-duration($args1, $args2) {
    -webkit-transition-duration: $args1, $args2;
       -moz-transition-duration: $args1, $args2;
         -o-transition-duration: $args1, $args2;
            transition-duration: $args1, $args2;
  }
  
  @mixin transition-delay($args) {
    -webkit-transition-delay: $args;
       -moz-transition-delay: $args;
         -o-transition-delay: $args;
            transition-delay: $args;
  }
  
  @mixin transition-property($args1, $args2) {
    -webkit-transition-property: $args1, $args2;
       -moz-transition-property: $args1, $args2;
         -o-transition-property: $args1, $args2;
            transition-property: $args1, $args2;
  }
  
  @mixin transition-timing-function($args) {
    -webkit-transition-timing-function: $args;
       -moz-transition-timing-function: $args;
         -o-transition-timing-function: $args;
            transition-timing-function: $args;
  }
  
  
    // background: -moz-linear-gradient(0deg, #91d1ff, #a387ff);
    // background: -webkit-linear-gradient(0deg, #91d1ff, #a387ff);
    // background: -ms-linear-gradient(0deg, #91d1ff, #a387ff);
  
  
  
  @mixin gradient($args1,$args2){
      -webkit-linear-gradient:(0deg, $args1, $args2);
         -moz-linear-gradient:(0deg, $args1, $args2);
           -o-linear-gradient:(0deg, $args1, $args2);
             -linear-gradient:(0deg, $args1, $args2);
  }
  
  
  @mixin filter($filter-type,$filter-amount) { 
    -webkit-filter: $filter-type+unquote('(#{$filter-amount})');
    -moz-filter: $filter-type+unquote('(#{$filter-amount})');
    -ms-filter: $filter-type+unquote('(#{$filter-amount})');
    -o-filter: $filter-type+unquote('(#{$filter-amount})');
    filter: $filter-type+unquote('(#{$filter-amount})');
  }
  
  @mixin flex-direction($fdirection) {
    -webkit-flex-direction: $direction;
       -moz-flex-direction: $direction;
        -ms-flex-direction: $direction;
         -o-flex-direction: $direction;
            flex-direction: $direction;
  }
  
  @mixin transform($transform) {
      -webkit-transform: $transform;
         -moz-transform: $transform;
          -ms-transform: $transform;
           -o-transform: $transform;
              transform: $transform;
  }
  
  @mixin transform-origin($value) {
      -webkit-transform-origin: $value;
         -moz-transform-origin: $value;
          -ms-transform-origin: $value;
           -o-transform-origin: $value;
              transform-origin: $value;
  }
  
  @mixin backface-visibility($value) {
      -webkit-backface-visibility: $value;
         -moz-backface-visibility: $value;
              backface-visibility: $value;
  }
  
  @mixin calc ( $property, $expression ) {
      #{$property}: -webkit-calc(#{$expression});
      #{$property}: -moz-calc(#{$expression});
      #{$property}: calc(#{$expression});
  }
  
  @mixin keyframes ( $animation-name ) {
      @-webkit-keyframes #{$animation-name} {
          @content;
      }
      @-moz-keyframes #{$animation-name}  {
          @content;
      }
      @-o-keyframes #{$animation-name} {
          @content;
      }
      @keyframes #{$animation-name} {
          @content;
      }
  }
  
  @mixin animation ($args) {
    -webkit-animation: $args;
       -moz-animation: $args;
         -o-animation: $args;
            animation: $args;
  }
  
  /* Medium Layout: 1280px */
  @mixin medium {
    @media (min-width: 992px) and (max-width: 1400px) {
      @content;
    }
  }
  
  /* Tablet Layout: 768px */
  @mixin tablet {
    @media (min-width: 768px) and (max-width: 1200px) {
      @content;
    }
  }
  
  /* Mobile Layout: 320px */
  @mixin mobile {
    @media (max-width: 767px) {
      @content;
    }
  }
  
  /* Wide Mobile Layout: 480px */
  @mixin wide-mobile {
    @media (min-width: 480px) and (max-width: 767px) {
      @content;
    }
  }
  
  
  @mixin cmq ($min, $max) {
    @media (min-width: $min) and (max-width: $max) {
      @content;
    }
  }
  


  
@mixin flexbox {
	display: -webkit-box;
	display: -webkit-flex;
	display: -moz-flex;
	display: -ms-flexbox;
	display: flex;
}

%flexbox { @include flexbox; }

//----------------------------------

@mixin inline-flex {
	display: -webkit-inline-box;
	display: -webkit-inline-flex;
	display: -moz-inline-flex;
	display: -ms-inline-flexbox;
	display: inline-flex;
}

%inline-flex { @include inline-flex; }

//----------------------------------------------------------------------

@mixin flex-direction($value: row) {
	@if $value == row-reverse {
		-webkit-box-direction: reverse;
		-webkit-box-orient: horizontal;
	} @else if $value == column {
		-webkit-box-direction: normal;
		-webkit-box-orient: vertical;
	} @else if $value == column-reverse {
		-webkit-box-direction: reverse;
		-webkit-box-orient: vertical;
	} @else {
		-webkit-box-direction: normal;
		-webkit-box-orient: horizontal;
	}
	-webkit-flex-direction: $value;
	-moz-flex-direction: $value;
	-ms-flex-direction: $value;
	flex-direction: $value;
}
	// Shorter version:
	@mixin flex-dir($args...) { @include flex-direction($args...); }

//----------------------------------------------------------------------

@mixin flex-wrap($value: nowrap) {
	// No Webkit Box fallback.
	-webkit-flex-wrap: $value;
	-moz-flex-wrap: $value;
	@if $value == nowrap {
		-ms-flex-wrap: none;
	} @else { 
		-ms-flex-wrap: $value; 
	}
	flex-wrap: $value;
}

//----------------------------------------------------------------------


@mixin flex-flow($values: (row nowrap)) {
	// No Webkit Box fallback.
	-webkit-flex-flow: $values;
	-moz-flex-flow: $values;
	-ms-flex-flow: $values;
	flex-flow: $values;
}

//----------------------------------------------------------------------


@mixin order($int: 0) {
	-webkit-box-ordinal-group: $int + 1;
	-webkit-order: $int;
	-moz-order: $int;
	-ms-flex-order: $int;
	order: $int;
}

//----------------------------------------------------------------------


@mixin flex-grow($int: 0) {
	-webkit-box-flex: $int;
	-webkit-flex-grow: $int;
	-moz-flex-grow: $int;
	-ms-flex-positive: $int;
	flex-grow: $int;
}

//----------------------------------------------------------------------

@mixin flex-shrink($int: 1) {
	-webkit-flex-shrink: $int;
	-moz-flex-shrink: $int;
	-ms-flex-negative: $int;
	flex-shrink: $int;
}

//----------------------------------------------------------------------


@mixin flex-basis($value: auto) {
	-webkit-flex-basis: $value;
	-moz-flex-basis: $value;
	-ms-flex-preferred-size: $value;
	flex-basis: $value;
}

//----------------------------------------------------------------------


@mixin flex($fg: 1, $fs: null, $fb: null) {
    
	// Set a variable to be used by box-flex properties
	$fg-boxflex: $fg;

	// Box-Flex only supports a flex-grow value so let's grab the
	// first item in the list and just return that.
	@if type-of($fg) == 'list' {
		$fg-boxflex: nth($fg, 1);
	}

	-webkit-box-flex: $fg-boxflex;
	-webkit-flex: $fg $fs $fb;
	-moz-box-flex: $fg-boxflex;
	-moz-flex: $fg $fs $fb;
	-ms-flex: $fg $fs $fb;
	flex: $fg $fs $fb;
}

//----------------------------------------------------------------------


@mixin justify-content($value: flex-start) {
	@if $value == flex-start {
		-webkit-box-pack: start;
		-ms-flex-pack: start;
	} @else if $value == flex-end {
		-webkit-box-pack: end;
		-ms-flex-pack: end;
	} @else if $value == space-between {
		-webkit-box-pack: justify;
		-ms-flex-pack: justify;
	} @else if $value == space-around {
		-ms-flex-pack: distribute;		
	} @else {
		-webkit-box-pack: $value;
		-ms-flex-pack: $value;
	}
	-webkit-justify-content: $value;
	-moz-justify-content: $value;
	justify-content: $value;
}
	// Shorter version:
	@mixin flex-just($args...) { @include justify-content($args...); }

//----------------------------------------------------------------------


@mixin align-items($value: stretch) {
	@if $value == flex-start {
		-webkit-box-align: start;
		-ms-flex-align: start;
	} @else if $value == flex-end {
		-webkit-box-align: end;
		-ms-flex-align: end;
	} @else {
		-webkit-box-align: $value;
		-ms-flex-align: $value;
	}
	-webkit-align-items: $value;
	-moz-align-items: $value;
	align-items: $value;
}



@mixin align-self($value: auto) {
	// No Webkit Box Fallback.
	-webkit-align-self: $value;
	-moz-align-self: $value;
	@if $value == flex-start {
		-ms-flex-item-align: start;
	} @else if $value == flex-end {
		-ms-flex-item-align: end;
	} @else {
		-ms-flex-item-align: $value;
	}
	align-self: $value;
}


@mixin align-content($value: stretch) {
	// No Webkit Box Fallback.
	-webkit-align-content: $value;
	-moz-align-content: $value;
	@if $value == flex-start {
		-ms-flex-line-pack: start;
	} @else if $value == flex-end {
		-ms-flex-line-pack: end;
	} @else {
		-ms-flex-line-pack: $value;
	}
	align-content: $value;
}
